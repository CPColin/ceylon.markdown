import ceylon.markdown.parser {
    ParseOptions,
    Parser
}
import ceylon.markdown.renderer {
    RawHtmlRenderer
}
import ceylon.test {
    assertEquals,
    parameters,
    tag,
    test
}

native shared class SpecTest() {
    function ceylonMarkdownDocument(String markdown, Boolean smartPunctuation)
            => Parser(ParseOptions {
                    smart = smartPunctuation;
                }).parse(markdown);
    
    native () shared void commonmarkJs(String label, String markdown, String html,
        Boolean smartPunctuation = false) {}
    
    native () shared void compareAsts(String label, String markdown, String html,
        Boolean smartPunctuation = false) {}
    
    "Verifies that the raw HTML generated by [[module ceylon.markdown]] matches the expected
     [[html]]."
    test
    parameters (`value specTests`)
    shared void rawHtml(String label, String markdown, String html,
        Boolean smartPunctuation = false) {
        assertEquals {
            actual = RawHtmlRenderer().render(ceylonMarkdownDocument(markdown, smartPunctuation));
            expected = html;
            message = "Direct-port renderer did not match the expected HTML for ``label``";
        };
    }
}

native ("js") shared class SpecTest() {
    function commonmarkJsDocument(String markdown, Boolean smartPunctuation)
            => commonmarkJsParser(smartPunctuation).parse(markdown);
    
    function commonmarkJsHtml(String markdown, Boolean smartPunctuation)
            => commonmarkJsRenderer.render(commonmarkJsDocument(markdown, smartPunctuation));
    
    "Verifies that the `commonmark.js` library produces the expected result, which serves as a
     sanity check that our parsing of `spec.txt` was successful."
    test
    parameters (`value specTests`)
    native ("js") shared void commonmarkJs(String label, String markdown, String html,
        Boolean smartPunctuation) {
        assertEquals(commonmarkJsHtml(markdown, smartPunctuation), html,
            "The commonmark.js library produced an unexpected result");
    }
    
    "Verifies that the AST generated by `ceylon.markdown` exactly matches the AST generated by
     `commonmark.js`."
    test
    tag ("compareDirectPortAsts")
    parameters (`value specTests`)
    native ("js") shared void compareAsts(String label, String markdown, String html,
        Boolean smartPunctuation) {
        package.compareAsts(ceylonMarkdownDocument(markdown, smartPunctuation),
            commonmarkJsDocument(markdown, smartPunctuation));
    }
}

native ("jvm") shared class SpecTest() {}
